// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TypeRole {
  ADMIN
  USER
  USER_FORMADOR
  USER_MENTOR
  USER_TECNICO_APOYO
  USER_DOCENTE
  USER_DIRECTOR
}

enum TypePersonEnum {
  FORMADOR
  MENTOR
  TECNICO_APOYO
  DOCENTE
  DIRECTOR
  EMPLEADO
}

enum TypeGender {
  M
  F
}

enum DeliveryMethod {
  In_Person
  Synchronous
}

/**
 * ====================
 * | Catalogue Module |
 * ====================
 */

// ====== START - CATALOGUE ======
model TypePerson {
  id          Int            @id @default(autoincrement())
  name        TypePersonEnum
  PersonRoles PersonRole[]
}

model Zone {
  id         Int          @id @default(autoincrement())
  name       String
  Department Department[]
}

model Department {
  id           Int            @id @default(autoincrement())
  name         String
  geonameId    Int            @unique
  countryId    Int
  zoneId       Int
  Zone         Zone           @relation(fields: [zoneId], references: [id])
  Municipality Municipality[]
  Group        Group[]
}

model Municipality {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  departmentId   Int
  Department     Department       @relation(fields: [departmentId], references: [id])
  District       District[]
  WorkAssignment WorkAssignment[]
}

model District {
  id             Int          @id @default(autoincrement())
  name           String
  municipalityId Int
  Municipality   Municipality @relation(fields: [municipalityId], references: [id])
  Person         Person[]
  School         School[]
}

model StoredEvent {
  id        Int      @id @default(autoincrement())
  type      String
  payload   Json
  createdAt DateTime @default(now())
  createdBy Int      @default(0)
}

model School {
  id              Int               @id @default(autoincrement())
  code            Int               @unique
  name            String
  zone            String
  sector          String
  districtId      Int
  District        District          @relation(fields: [districtId], references: [id])
  coordenates     String
  PrincipalSchool PrincipalSchool[]
}

// ====== END - CATALOGUE ======

/**
 * =================================================
 * | Authorization or Roles and Permissions Module |
 * =================================================
 */

// ====== START - AUTHORIZATION ======
model Role {
  id          Int              @id @default(autoincrement())
  name        TypeRole
  Uses        User[]
  Permissions RolePermission[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique // e.g., "READ_USERS"
  description String?
  MenuItems   MenuPermission[]
  Roles       RolePermission[]
}

model RolePermission {
  id           Int         @id @default(autoincrement())
  isActive     Boolean
  roleId       Int
  permissionId Int?
  Role         Role        @relation(fields: [roleId], references: [id])
  Permission   Permission? @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model MenuItem {
  id         Int              @id @default(autoincrement())
  title      String
  path       String
  icon       String?
  parentId   Int? // Para submenús
  Children   MenuItem[]       @relation("Menu")
  Parent     MenuItem?        @relation("Menu", fields: [parentId], references: [id])
  Permission MenuPermission[]
}

model MenuPermission {
  id           Int         @id @default(autoincrement())
  menuId       Int
  permissionId Int
  Menu         MenuItem    @relation(fields: [menuId], references: [id])
  Permission   Permission? @relation(fields: [permissionId], references: [id])

  @@unique([menuId, permissionId])
}

// ====== END - AUTHORIZATION ======

/**
 * ==================
 * | Profile Module |
 * ==================
 */

// ====== START - PROFILE ======
model Person {
  id              Int               @id @default(autoincrement())
  firstName       String
  lastName1       String
  lastName2       String?
  dui             String            @unique
  address         String
  gender          TypeGender
  phoneNumber     String
  birthdate       String?
  duiImage        String[]
  districtId      Int
  District        District          @relation(fields: [districtId], references: [id])
  isActive        Boolean           @default(true)
  User            User?
  Academic        Academic?
  PrincipalSchool PrincipalSchool[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  updatedBy       Int?
  deletedBy       Int?
  PersonRole      PersonRole[]
  WorkAssignment  WorkAssignment[]
}

model PrincipalSchool {
  id        Int       @id @default(autoincrement())
  personId  Int
  Person    Person    @relation(fields: [personId], references: [id])
  schoolId  Int
  School    School    @relation(fields: [schoolId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?
  deletedBy Int?
}

model PersonRole {
  id           Int           @id @default(autoincrement())
  typePersonId Int
  TypePerson   TypePerson    @relation(fields: [typePersonId], references: [id])
  personId     Int
  Person       Person        @relation(fields: [personId], references: [id])
  GroupMentor  GroupMentor[]
  Inscription  Inscription[]
  GroupLeader  GroupLeader[]
  Attendances  Attendance[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  createdBy    Int?
  updatedBy    Int?
  deletedBy    Int?
  Event        Event[]
}

model WorkAssignment {
  id                     Int          @id @default(autoincrement())
  personId               Int
  Person                 Person       @relation(fields: [personId], references: [id])
  assignedMunicipalityId Int
  Municipality           Municipality @relation(fields: [assignedMunicipalityId], references: [id])
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  deletedAt              DateTime?
  createdBy              Int?
  updatedBy              Int?
  deletedBy              Int?
}

model Academic {
  id        Int       @id @default(autoincrement())
  career    String // Carrera o especialidad
  nip       Int?
  cvImage   String?
  isService Boolean   @default(false)
  personId  Int       @unique
  Person    Person    @relation(fields: [personId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  updatedBy Int?
  deletedBy Int?
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  passwd        String
  avatar        String?
  isVerified    Boolean   @default(false)
  lastLoginDate DateTime?
  isActive      Boolean   @default(true)
  roleId        Int
  Role          Role      @relation(fields: [roleId], references: [id])
  personId      Int       @unique
  Person        Person    @relation(fields: [personId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  updatedBy     Int?
  deletedBy     Int?
  UserKey       UserKey[]
}

model UserKey {
  id         Int       @id @default(autoincrement())
  userId     Int
  publicKey  String
  privateKey String
  createdAt  DateTime  @default(now())
  revokedAt  DateTime?
  isActive   Boolean   @default(true)
  user       User      @relation(fields: [userId], references: [id])
}

// ====== END - PROFILE ======

/**
 * ================================
 * | Group and Inscription Module |
 * ================================
 */

// ====== START - GROUP & INSCRIPTION ======
model Group {
  id           Int            @id @default(autoincrement())
  name         String // example: "Grupo #1 (CFD Santa Ana)"
  memberCount  Int
  departmentId Int
  Department   Department     @relation(fields: [departmentId], references: [id])
  GroupSeminar GroupSeminar[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  createdBy    Int?
  updatedBy    Int?
  deletedBy    Int?
  Inscription  Inscription[]
  GroupLeader  GroupLeader[]
  GroupMentors GroupMentor[]
}

model GroupLeader {
  id         Int        @id @default(autoincrement())
  trainerId  Int
  groupId    Int
  PersonRole PersonRole @relation(fields: [trainerId], references: [id])
  Group      Group      @relation(fields: [groupId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime?
  createdBy  Int?
  updatedBy  Int?
  deletedBy  Int?
}

model GroupMentor {
  id         Int        @id @default(autoincrement())
  mentorId   Int
  groupId    Int
  PersonRole PersonRole @relation(fields: [mentorId], references: [id])
  Group      Group      @relation(fields: [groupId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime?
  createdBy  Int?
  updatedBy  Int?
  deletedBy  Int?

  // Relación: cada mentor tiene asignados docentes
  MentorAssignments MentorAssignment[]

  @@unique([mentorId, groupId])
}

model Inscription {
  id                 Int                  @id @default(autoincrement())
  groupId            Int
  teacherId          Int
  PersonRole         PersonRole           @relation(fields: [teacherId], references: [id])
  Group              Group                @relation(fields: [groupId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  createdBy          Int?
  updatedBy          Int?
  deletedBy          Int?
  MentorAssignment   MentorAssignment[]
  ModuleReport       ModuleReport[]
  TrainingEvaluation TrainingEvaluation[]
  ModuleEvaluation   ModuleEvaluation[]
}

model MentorAssignment {
  id            Int         @id @default(autoincrement())
  mentorId      Int
  inscriptionId Int
  GroupMentor   GroupMentor @relation(fields: [mentorId], references: [id])
  Inscription   Inscription @relation(fields: [inscriptionId], references: [id])
}

// ====== END - GROUP & INSCRIPTION ======

/**
 * ================================
 * | Attendance Module |
 * ================================
 */

// ====== START - ATTENDANCE ======
model Attendance {
  id           Int        @id @default(autoincrement())
  eventId      Int
  personRoleId Int
  checkIn      DateTime
  checkOut     DateTime?
  coordenates  String?
  Event        Event      @relation(fields: [eventId], references: [id])
  PersonRole   PersonRole @relation(fields: [personRoleId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  createdBy    Int
  updatedBy    Int?
}

model EventType {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  Event Event[]
}

model Event {
  id            Int          @id @default(autoincrement())
  name          String
  eventTypeId   Int
  responsableId Int
  eventType     EventType    @relation(fields: [eventTypeId], references: [id])
  Attendances   Attendance[]
  PersonRole    PersonRole   @relation(fields: [responsableId], references: [id])
}

// ====== END - ATTENDANCE ======

/**
 * ================================
 * | Grades |
 * ================================
 */

// ====== START - GRADES ======

model ModuleReport {
  id               Int            @id @default(autoincrement())
  moduleScore      Float
  status           String
  trainingModuleId Int
  TrainingModule   TrainingModule @relation(fields: [trainingModuleId], references: [id])
  inscriptionId    Int
  Inscription      Inscription    @relation(fields: [inscriptionId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  createdBy        Int?
  updatedBy        Int?
  deletedBy        Int?

  @@unique([trainingModuleId, inscriptionId])
}

model TrainingEvaluation {
  id                     Int                  @id @default(autoincrement())
  grade                  Float
  comment                String
  evaluationInstrumentId Int
  EvaluationInstrument   EvaluationInstrument @relation(fields: [evaluationInstrumentId], references: [id])
  inscriptionId          Int
  Inscription            Inscription          @relation(fields: [inscriptionId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  deletedAt              DateTime?
  createdBy              Int?
  updatedBy              Int?
  deletedBy              Int?
}

model ModuleEvaluation {
  id                     Int                  @id @default(autoincrement())
  grade                  Float
  comment                String
  moduleProgressStatus   String
  evaluationInstrumentId Int
  EvaluationInstrument   EvaluationInstrument @relation(fields: [evaluationInstrumentId], references: [id])
  inscriptionId          Int
  Inscription            Inscription          @relation(fields: [inscriptionId], references: [id])
  trainingModuleId       Int
  TrainingModule         TrainingModule       @relation(fields: [trainingModuleId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  deletedAt              DateTime?
  createdBy              Int?
  updatedBy              Int?
  deletedBy              Int?
}

model EvaluationInstrument {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  periodicity        String
  percentage         Float
  ModuleEvaluation   ModuleEvaluation[]
  TrainingEvaluation TrainingEvaluation[]
}

model TrainingModule {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  moduleReport     ModuleReport[]
  ModuleEvaluation ModuleEvaluation[]
}

// ====== END - GRADES ======
model Seminar {
  id             Int            @id @default(autoincrement())
  name           String // example: todo
  date           DateTime
  duration       Float // note: it is not necessary to set exact precision, an approximate precision is sufficient
  deliveryMethod DeliveryMethod
  GroupSeminar   GroupSeminar[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  createdBy      Int?
  updatedBy      Int?
  deletedBy      Int?
}

model GroupSeminar {
  id        Int       @id @default(autoincrement())
  groupId   Int
  Group     Group     @relation(fields: [groupId], references: [id])
  seminarId Int
  Seminar   Seminar   @relation(fields: [seminarId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?
  deletedBy Int?

  @@unique([groupId, seminarId])
}

model Unit {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?
  deletedBy Int?
}

model TypeContent {
  id        Int       @id @default(autoincrement())
  name      String // example:  In_Person_Workshop, Webinar, Asynchronous_Session, Community_Of_Practice
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?
  deletedBy Int?
}

model Content {
  id             Int            @id @default(autoincrement())
  name           String // example: todo
  duration       Float
  deliveryMethod DeliveryMethod
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  createdBy      Int?
  updatedBy      Int?
  deletedBy      Int?
}
