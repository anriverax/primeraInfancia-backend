// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TypeRole {
  ADMIN
  USER
  USER_FORMADOR
  USER_MENTOR
  USER_TECNICO_APOYO
  USER_DOCENTE
  USER_DIRECTOR
}

enum TypePermission {
  CREAR
  EDITAR
  ELIMINAR
  VER
  LEER
}

enum TypePersonEnum {
  FORMADOR
  MENTOR
  TECNICO_APOYO
  DOCENTE
  DIRECTOR
  EMPLEADO
}

enum TypeGender {
  M
  F
}

enum Modality {
  PRESENCIAL
  SINCRÓNICO
}

enum Sector {
  Public
  Private
}

// ====== START - CATALOGUE ======
model TypePerson {
  id     Int            @id @default(autoincrement())
  name   TypePersonEnum
  Person Person[]
}

model Role {
  id         Int              @id @default(autoincrement())
  name       TypeRole
  User       User[]
  Permission RolePermission[]
}

model Menu {
  id             Int              @id @default(autoincrement())
  title          String
  path           String
  icon           String?
  parentId       Int? // Para submenús
  MenuPermission MenuPermission[]
  Children       Menu[]           @relation("Menu")
  Parent         Menu?            @relation("Menu", fields: [parentId], references: [id])
}

model PermissionType {
  id             Int              @id @default(autoincrement())
  name           TypePermission   @unique
  MenuPermission MenuPermission[]
}

model MenuPermission {
  id               Int              @id @default(autoincrement())
  menuId           Int
  Menu             Menu             @relation(fields: [menuId], references: [id])
  permissionTypeId Int
  PermissionType   PermissionType   @relation(fields: [permissionTypeId], references: [id])
  RolePermission   RolePermission[]

  @@unique([menuId, permissionTypeId])
}

model RolePermission {
  id               Int            @id @default(autoincrement())
  isActive         Boolean
  roleId           Int
  Role             Role           @relation(fields: [roleId], references: [id])
  menuPermissionId Int
  MenuPermission   MenuPermission @relation(fields: [menuPermissionId], references: [id])

  @@unique([roleId, menuPermissionId])
}

model Department {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  geonameId    Int            @unique
  countryId    Int
  Municipality Municipality[]
}

model Municipality {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  departmentId Int
  Department   Department @relation(fields: [departmentId], references: [id])
  District     District[]
}

model District {
  id             Int          @id @default(autoincrement())
  name           String
  municipalityId Int
  Municipality   Municipality @relation(fields: [municipalityId], references: [id])
  Person         Person[]
  School         School[]
}

model StoredEvent {
  id        Int      @id @default(autoincrement())
  type      String
  payload   Json
  createdAt DateTime @default(now())
  createdBy Int      @default(0)
}

// ====== END - CATALOGUE ======

model Person {
  id              Int               @id @default(autoincrement())
  firstName       String
  lastName1       String
  lastName2       String
  dui             String            @unique
  address         String
  gender          TypeGender
  phoneNumber     String
  birthdate       String?
  duiImage        String[]
  districtId      Int
  District        District          @relation(fields: [districtId], references: [id])
  isActive        Boolean           @default(true)
  typePersonId    Int
  TypePerson      TypePerson        @relation(fields: [typePersonId], references: [id])
  User            User?
  Academic        Academic?
  PrincipalSchool PrincipalSchool[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  updatedBy       Int?
  deletedBy       Int?
  GroupMember     GroupMember[]
  Group           Group[]
}

model Academic {
  id        Int       @id @default(autoincrement())
  career    String // Carrera o especialidad
  nip       Int?
  cvImage   String?
  isService Boolean   @default(false)
  personId  Int       @unique
  Person    Person    @relation(fields: [personId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  updatedBy Int?
  deletedBy Int?
}

/**
 * type of place = tipo de plaza
 * zone = zona (Rural, Urbana)
 * sector (publico, privado)
 */

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  passwd        String
  avatar        String?
  isVerified    Boolean   @default(false)
  lastLoginDate DateTime?
  isActive      Boolean   @default(true)
  roleId        Int
  Role          Role      @relation(fields: [roleId], references: [id])
  personId      Int       @unique
  Person        Person    @relation(fields: [personId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  updatedBy     Int?
  deletedBy     Int?
  UserKey       UserKey[]
}

model UserKey {
  id         Int       @id @default(autoincrement())
  userId     Int
  publicKey  String
  privateKey String
  createdAt  DateTime  @default(now())
  revokedAt  DateTime?
  isActive   Boolean   @default(true)
  user       User      @relation(fields: [userId], references: [id])
}

model Zone {
  id        Int       @id @default(autoincrement())
  name      String // example: "Zona Occidente"
  Group     Group[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?
  deletedBy Int?
}

model Group {
  id           Int            @id @default(autoincrement())
  name         String // example: "Grupo #1 (CFD Santa Ana)"
  description  String // example: FMT Santa Ana y Ahuachapán Centro y Norte
  memberCount  Int
  personId     Int
  Person       Person         @relation(fields: [personId], references: [id])
  zoneId       Int
  Zone         Zone           @relation(fields: [zoneId], references: [id])
  GroupSeminar GroupSeminar[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  createdBy    Int?
  updatedBy    Int?
  deletedBy    Int?
  GroupMember  GroupMember[]
}

model GroupMember {
  id        Int       @id @default(autoincrement())
  personId  Int
  groupId   Int
  Person    Person    @relation(fields: [personId], references: [id])
  Group     Group     @relation(fields: [groupId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?
  deletedBy Int?
}

model Seminar {
  id             Int            @id @default(autoincrement())
  name           String // example: todo
  date           DateTime
  duration       Float // note: it is not necessary to set exact precision, an approximate precision is sufficient
  modality       Modality
  GroupSeminar   GroupSeminar[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  createdBy      Int?
  updatedBy      Int?
  deletedBy      Int?
}

model GroupSeminar {
  id        Int       @id @default(autoincrement())
  groupId   Int
  Group     Group     @relation(fields: [groupId], references: [id])
  seminarId Int
  Seminar   Seminar   @relation(fields: [seminarId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?
  deletedBy Int?

  @@unique([groupId, seminarId])
}

model School {
  id              Int               @id @default(autoincrement())
  name            String
  sector          Sector
  districtId      Int
  District        District          @relation(fields: [districtId], references: [id])
  address         String
  email           String
  coordenates     String
  phoneNumber     String
  PrincipalSchool PrincipalSchool[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  createdBy       Int?
  updatedBy       Int?
  deletedBy       Int?
}

model PrincipalSchool {
  id        Int       @id @default(autoincrement())
  personId  Int
  Person    Person    @relation(fields: [personId], references: [id])
  schoolId  Int
  School    School    @relation(fields: [schoolId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?
  deletedBy Int?

  @@unique([personId, schoolId])
}

model Unit {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?
  deletedBy Int?
}

model TypeContent {
  id        Int       @id @default(autoincrement())
  name      String // example:  In_Person_Workshop, Webinar, Asynchronous_Session, Community_Of_Practice
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?
  deletedBy Int?
}

model Content {
  id             Int            @id @default(autoincrement())
  name           String // example: todo
  duration       Float
  modality       Modality
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  createdBy      Int?
  updatedBy      Int?
  deletedBy      Int?
}
